name: .NET 8 Build, Docker Build, SonarCloud Analysis

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # Etapa de checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para melhor análise do SonarCloud

      # Configurar .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0'

      # Configurar Java para SonarCloud
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # Cache para pacotes do SonarCloud
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # Instalar ferramentas do SonarCloud
      - name: Install SonarCloud Scanner
        run: dotnet tool install --global dotnet-sonarscanner

      # Instalar ReportGenerator
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # Restaurar dependências
      - name: Restore dependencies
        run: dotnet restore OrderSync.sln

      # Build da solução
      - name: Build
        run: dotnet build OrderSync.sln --no-restore --configuration Release

      # Executar testes com cobertura de código
      - name: Run tests with coverage
        run: |
           dotnet test OrderSyncApi.Tests/OrderSyncApi.Tests.csproj --no-build  --configuration Release --collect:"XPlat Code Coverage"
#OrderSyncApi.Tests/OrderSyncApi.Tests.csproj
      # Converter cobertura para XML
      - name: Convert coverage to XML
        run: |
          reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coveragereport -reporttypes:Cobertura

      # Executar análise do SonarCloud
      - name: Run SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet-sonarscanner begin /k:"Leock9_OrderSynApi" /o:"leock9" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="**/coverage.cobertura.xml"
          dotnet build OrderSync.sln
          dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.result == 'success'

    steps:
      # Etapa de checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v3

      # Configurar Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Cache para camadas do Docker
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Print current directory
        run: pwd
        
      # Build e tag da imagem Docker para a API
      - name: Build and tag Docker image for API
        run: |
          docker build -f OrderSyncApi/Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/ordersyncapi:v1 .
      #OrderSyncApi/Dockerfile
      # Login no Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Push da imagem para o Docker Hub
      - name: Push the image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/ordersyncapi:v1
